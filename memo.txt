CREATE TABLE tbl_article
(	article_no	INT		        NOT NULL	AUTO_INCREMENT	-- 게시글 번호
,	title		VARCHAR(200)	NOT NULL			        -- 게시글 제목
,	content		TEXT		    NULL				        -- 게시글 내용
,	writer		VARCHAR(50)	    NOT NULL			        -- 게시글 작성자
,	regdate		TIMESTAMP	    NOT NULL	DEFAULT NOW()	-- 게시글 등록시간
,	viewcnt		INT		        DEFAULT	0			        -- 게시글 조회수
,	PRIMARY KEY (article_no)					            -- 게시글 기본키
);


<테이블 생성>
1. 테이블 생성

<DAO 계층 구현>
- *VO
- *DAO // 인터페이스 생성 후 메서드 정의
- *DAOImpl // 구현 클래스 작성하고(@Repository), 메서드를 오버라이딩
- *Mapper.xml
  - // Mapper의 resultType을 위한 mybatis-config.xml의 alias 설정
  - // 자바 객체 필드변수와 DB 컬럼명의 불일치로 인한 문제를 해결하기 위한 SQL AS 키워드 또는 resultMap 설정
- *DAOTest

<Service 계층 구현>
- *Service // 인터페이스 생성 후 메서드 정의
- *ServiceImpl // 구현 클래스 작성하고(@Service), 메서드를 오버라이딩

<기본 게시판 CRUD URI>
GET - /article/write - 게시글의 등록 페이지
POST - /article/write - 게시글의 등록 처리
GET - /article/list - 게시글의 목록 페이지
GET - /article/read?articleNo=게시글 번호 - 게시글의 조회
GET - /article/modify?articleNo=게시글 번호 - 게시글의 수정 페이지
POST - /article/modify - 게시글의 수정 처리
POST - /article/remove - 게시글의 삭제 처리

<게시글의 기본 CRUD관련 Controller 작성>
- Controller 작성

- 파라미터 수집은 SpringMVC에서 자동으로 이루어지므로, 파라미터의 수집이 필요할 경우 원하는 객체를 파라미터로 선언하고, 특별한 경우가 아니라면 VO 클래스나 DTO 클래스를 파라미터로 사용하는 것이 편리하다.
- 브라우저에서 들어오는 요청이 자동으로 파라미터로 지정한 클래스의 객체 속성 값으로 처리되는데 이것을 바인딩이라고 한다.
- SpringMVC의 Model 객체는 해당 메서드에서 뷰(jsp)에 필요한 데이터를 전달하는 용도로 사용되는데 메서드 내에 뷰로 전달할 데이터가 있다면 Model을 파라미터로 선언해주는 것이 편리하다.
- RedirectAttributes 객체는 redirect 되는 시점에 한번만 사용될 데이터를 전송할 수 있는 addFlashAttribute()라는 메서드가 정의 되어 있다.
  이 메서드를 사용하면 redirect 된 페이지까지 데이터를 전송하지만 URI 상에서는 보이지 않게 된다.
- @RequestParam은 Servlet에서 request.getParameter()와 유사한 역할을 수행하는데 문자열, 숫자, 날짜 등의 형변환까지 가능하다.

- 화면 .jsp 변경







[참고]
https://doublesprogramming.tistory.com
https://whitepaek.tistory.com
https://effectivesquid.tistory.com

감사합니다. 개발자 선배님들.