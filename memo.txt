<프로젝트 관련 쿼리>
CREATE TABLE tbl_article
(	article_no	INT		        NOT NULL	AUTO_INCREMENT	-- 게시글 번호
,	title		VARCHAR(200)	NOT NULL			        -- 게시글 제목
,	content		TEXT		    NULL				        -- 게시글 내용
,	writer		VARCHAR(50)	    NOT NULL			        -- 게시글 작성자
,	regdate		TIMESTAMP	    NOT NULL	DEFAULT NOW()	-- 게시글 등록시간
,	viewcnt		INT		        DEFAULT	0			        -- 게시글 조회수
,	PRIMARY KEY (article_no)					            -- 게시글 기본키
);


<테이블 생성>
1. 테이블 생성



<DAO 계층 구현>
- *VO
- *DAO // 인터페이스 생성 후 메서드 정의
- *DAOImpl // 구현 클래스 작성하고(@Repository), 메서드를 오버라이딩
- *Mapper.xml
  - // Mapper의 resultType을 위한 mybatis-config.xml의 alias 설정
  - // 자바 객체 필드변수와 DB 컬럼명의 불일치로 인한 문제를 해결하기 위한 SQL AS 키워드 또는 resultMap 설정
- *DAOTest



<Service 계층 구현>
- *Service // 인터페이스 생성 후 메서드 정의
- *ServiceImpl // 구현 클래스 작성하고(@Service), 메서드를 오버라이딩



<기본 게시판 CRUD URI>
GET - /article/write - 게시글의 등록 페이지
POST - /article/write - 게시글의 등록 처리
GET - /article/list - 게시글의 목록 페이지
GET - /article/read?articleNo=게시글 번호 - 게시글의 조회
GET - /article/modify?articleNo=게시글 번호 - 게시글의 수정 페이지
POST - /article/modify - 게시글의 수정 처리
POST - /article/remove - 게시글의 삭제 처리



<게시글의 기본 CRUD관련 Controller 작성>
- Controller 작성

- 파라미터 수집은 SpringMVC에서 자동으로 이루어지므로, 파라미터의 수집이 필요할 경우 원하는 객체를 파라미터로 선언하고, 특별한 경우가 아니라면 VO 클래스나 DTO 클래스를 파라미터로 사용하는 것이 편리하다.
- 브라우저에서 들어오는 요청이 자동으로 파라미터로 지정한 클래스의 객체 속성 값으로 처리되는데 이것을 바인딩이라고 한다.
- SpringMVC의 Model 객체는 해당 메서드에서 뷰(jsp)에 필요한 데이터를 전달하는 용도로 사용되는데 메서드 내에 뷰로 전달할 데이터가 있다면 Model을 파라미터로 선언해주는 것이 편리하다.
- RedirectAttributes 객체는 redirect 되는 시점에 한번만 사용될 데이터를 전송할 수 있는 addFlashAttribute()라는 메서드가 정의 되어 있다.
  이 메서드를 사용하면 redirect 된 페이지까지 데이터를 전송하지만 URI 상에서는 보이지 않게 된다.
- @RequestParam은 Servlet에서 request.getParameter()와 유사한 역할을 수행하는데 문자열, 숫자, 날짜 등의 형변환까지 가능하다.

- 화면 .jsp 변경



<예외처리>
- ControllerAdive 애너테이션을 통해 이 클래스의 객체가 컨트롤러에서 발생하는 Exception을 전문적으로 처리하는 클래스를 명시해준 것이다.
- commonException() 메서드의 선언부에는 @ExceptionHandler 라는 애너테이션을 붙여 적절한 타입의 Exception을 처리하도록 함
  일반 컨트롤러 클래스와 다르게 Model을 파라미터로 사용하는 것을 지원하지 않기 때문에 ModelAndView 타입을 직접 사용하는 형태로 작성해야하 한다.
  ModelAndView는 하나의 객체에 Model 데이터와 View의 처리를 동시에 처리할 수 있는 객체이다.
  만약 예외가 발생하게 되면 예외가 발생한 내용이 담긴 데이터를 exception에 담고, common_error.jsp에 전달하게 된다.



<페이징 처리>
1. 페이징 처리 구현 단계
페이징 처리는 사용자에게 필요한 최소한의 데이터를 전송하기 위해 전체 데이터 중에서 일부분만을 보여주는 방식을 의미한다.
- URI의 문자열을 조절해 원하는 페이지의 데이터가 출력되게 하는 1단계
- 목록 페이지 하단에 페이지 번호를 보여주고, 번호를 클릭하면 해당 페이지로 이동하는 2단계
- 목록 페이지에서 조회나 수정 작업을 한 뒤에 다시 원래의 목록 페이지로 이동할 수 있게 처리하는 3단계

2. 페이징 처리의 원칙
- 페이징 처리는 반드시 GET 방식만을 이용한다.
- 페이징 처리가 되면 조회 화면에서 반드시 목록으로 이동할 수 있어야 한다.
  예를 들면 게시판의 4페이지를 보다가 특정 게시물을 조회하고, 목록으로 이동할 경우 다시 4페이지로 이동할 수 있어야 한다.
- 페이징 처리는 반드시 필요한 페이지 번호만을 제공해야한다. 만약 페이지당 10개의 게시글을 출력하고,
  전체 데이터가 41건의 게시글이 있다면 4페이지까지 화면에 출력되어야 하며,
  더 많은 데이터가 존재할 경우 다음, 이전과 같은 버튼이 존재해야한다.

3. 더미 데이터 넣기
- ArticleDAOTest.java 파일에서
// 게시글 1000개 생성 테스트
    @Test
    public void testCreate() throws Exception {

        for(int i = 1; i <= 1000; i++) {
            ArticleVO articleVO = new ArticleVO();
            articleVO.setTitle("제목" + i);
            articleVO.setContent("내용" + i);
            articleVO.setWriter("작성자" + (i%10));

            articleDAO.create(articleVO);
        }

    }

4. 페이징 처리를 위한 SQL : LIMIT
DB에 따라 페이징 처리를 위한 방법은 각기 다르다
MySQL의 경우 LIMIT을, ORACLE의 경우는 ROWNUM을 이용한다.

-- MySQL
SELECT *
  FROM 테이블명
 LIMIT 시작데이터, 출력할 데이터 갯수

LIMIT을 사용하는 방법은 기존의 SELECT 쿼리에 LIMIT 키워드를 써주고
첫번째는 시작데이터를 두번째는 출력할 데이터의 갯수를 써주면 된다.
만약 게시글을 10건씩 출력하고, 첫 번째 페이지를 출력하고 싶다면 아래와 같이 쿼리를 작성하면 된다.

SELECT
       article_no
     , title
     , content
     , writer
     , regdate
     , viewcnt
  FROM tbl_article
 WHERE article_no > 0
 ORDER BY article_no DESC, regdate DESC
 LIMIT 0, 10;

5. 페이징 처리를 위한 DAO 계층 구현
6. 페이징 처리 SQL 테스트
7. 페이징 처리를 도와줄 Crieria 클래스 작성
8. DAO 계층 수정 및 테스트
9. 비즈니스 계층 구현
10. 페징 처리 간단 요약




[참고]
https://doublesprogramming.tistory.com
https://whitepaek.tistory.com
https://effectivesquid.tistory.com

감사합니다. 개발자 선배님들.